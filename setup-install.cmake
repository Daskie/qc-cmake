include_guard()

include(CMakePackageConfigHelpers)

function(_qc_setup_install_bundled_library target)
endfunction()

#
# Sets up the install commands for the given targets
#
# qc_setup_install(
#     TARGETS <target>...
#     [DEPENDENCIES <package>...]
# )
#
function(qc_setup_install)
    cmake_parse_arguments(
        PARSE_ARGV
        0
        ""
        ""
        ""
        "TARGETS;DEPENDENCIES")

    qc_check_args()

    set(package ${CMAKE_PROJECT_NAME})

    # Validate targets
    if(NOT DEFINED _TARGETS)
        message(FATAL_ERROR "Must provide targets")
    endif()
    foreach(target IN LISTS _TARGETS)
        get_target_property(target_type ${target} TYPE)
        if(NOT target_type STREQUAL "STATIC_LIBRARY" AND NOT target_type STREQUAL "INTERFACE_LIBRARY")
            message(FATAL_ERROR "Target `${target}`'s type `${target_type}` is not currently supported")
        endif()
    endforeach()

    # Install targets (binaries & headers)
    install(
        TARGETS ${_TARGETS}
        EXPORT ${package}-targets
        FILE_SET HEADERS)

    # Install exports (cmake files that define import targets)
    install(
        EXPORT ${package}-targets
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${package}
        NAMESPACE ${package}::)

    # Generate config file
    set(config "\
#
# Generated by QC CMake
#
")
    list(LENGTH _DEPENDENCIES dependencies_count)
    if(dependencies_count GREATER 0)
        string(APPEND config "
# Find dependencies
include(CMakeFindDependencyMacro)")
        foreach(dependency IN LISTS _DEPENDENCIES)
            string(APPEND config "
find_dependency(${dependency})")
        endforeach()
        string(APPEND config "
")
    endif()
    string(APPEND config "
# Include targets file
include(\"\${CMAKE_CURRENT_LIST_DIR}/${package}-targets.cmake\")

# Check required components
foreach(comp \${${package}_FIND_COMPONENTS})
    if(NOT ${package}_\${comp}_FOUND)
        if(${package}_FIND_REQUIRED_\${comp})
            message(WARNING \"Did not find required component `\${comp}` for package `${package}`\")
            set(${package}_FOUND FALSE)
        endif()
    endif()
endforeach()
")

    # Write config file
    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${package}-config.cmake ${config})

    # Install config file
    install(
        FILES ${CMAKE_CURRENT_BINARY_DIR}/${package}-config.cmake
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${package})

    # Install bundled libraries
    foreach(target IN LISTS _TARGETS)
        if(TARGET ${target}-bundled)
            get_target_property(bundled_lib_file ${target}-bundled IMPORTED_LOCATION)
            install(FILES ${bundled_lib_file} TYPE LIB)
        endif()
    endforeach()

endfunction()
